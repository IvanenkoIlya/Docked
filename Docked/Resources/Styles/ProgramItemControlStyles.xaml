<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:icons="http://metro.mahapps.com/winfx/xaml/iconpacks"
                    xmlns:mah="http://metro.mahapps.com/winfx/xaml/controls"
                    xmlns:controlzex="urn:controlzex"
                    xmlns:converters="clr-namespace:Docked.Util.Converters">

   <converters:NullableBooleanConverter x:Key="NullableBooleanConverter" />

   <!--#region Icon Button Styles-->
   <Style TargetType="{x:Type Button}" x:Key="IconButtonStyle">
      <Setter Property="Foreground" Value="Black"/>
      <Setter Property="Template">
         <Setter.Value>
            <ControlTemplate TargetType="{x:Type Button}">
               <Viewbox Stretch="Uniform" 
                        StretchDirection="Both">
                  <Grid Height="16" 
                        Width="16"
                        Background="Transparent">
                     <ContentPresenter />
                     <Grid.Style>
                        <Style TargetType="{x:Type Grid}">
                           <Style.Triggers>
                              <Trigger Property="IsMouseOver" Value="True">
                                 <Trigger.EnterActions>
                                    <BeginStoryboard>
                                       <Storyboard>
                                          <ThicknessAnimation Storyboard.TargetProperty="(Grid.Margin)"
                                                           To="-1" 
                                                           Duration="0:0:0.1"/>
                                       </Storyboard>
                                    </BeginStoryboard>
                                 </Trigger.EnterActions>
                                 <Trigger.ExitActions>
                                    <BeginStoryboard>
                                       <Storyboard>
                                          <ThicknessAnimation Storyboard.TargetProperty="(Grid.Margin)"
                                                           To="0" 
                                                           Duration="0:0:0.1"/>
                                       </Storyboard>
                                    </BeginStoryboard>
                                 </Trigger.ExitActions>
                              </Trigger>
                           </Style.Triggers>
                        </Style>
                     </Grid.Style>
                  </Grid>
               </Viewbox>
            </ControlTemplate>
         </Setter.Value>
      </Setter>
   </Style>

   <Style TargetType="{x:Type Button}" x:Key="DeleteButtonStyle" BasedOn="{StaticResource IconButtonStyle}">
      <Setter Property="Content">
         <Setter.Value>
            <Grid>
               <icons:PackIconForkAwesome Kind="TrashOutline"/>
            </Grid>
         </Setter.Value>
      </Setter>
   </Style>

   <Style TargetType="{x:Type Button}" x:Key="ChangeIconButtonStyle" BasedOn="{StaticResource IconButtonStyle}">
      <Setter Property="Content">
         <Setter.Value>
            <Grid>
               <icons:PackIconUnicons Kind="Image"/>
            </Grid>
         </Setter.Value>
      </Setter>
   </Style>

   <Style TargetType="{x:Type Button}" x:Key="ChangeColorButtonStyle" BasedOn="{StaticResource IconButtonStyle}">
      <Setter Property="Content">
         <Setter.Value>
            <Grid>
               <icons:PackIconFontAwesome Kind="PaintBrushSolid"/>
            </Grid>
         </Setter.Value>
      </Setter>
   </Style>

   <Style TargetType="{x:Type Button}" x:Key="BrowseProgramButtonStyle" BasedOn="{StaticResource IconButtonStyle}">
      <Setter Property="Content">
         <Setter.Value>
            <Grid>
               <icons:PackIconCodicons Kind="Folder"/>
            </Grid>
         </Setter.Value>
      </Setter>
   </Style>

   <Style TargetType="{x:Type Button}" x:Key="TagsButtonStyle" BasedOn="{StaticResource IconButtonStyle}">
      <Setter Property="Content">
         <Setter.Value>
            <Grid>
               <icons:PackIconForkAwesome Kind="Tags" />
            </Grid>
         </Setter.Value>
      </Setter>
   </Style>

   <Style TargetType="{x:Type Button}" x:Key="AddButtonStyle" BasedOn="{StaticResource IconButtonStyle}">
      <Setter Property="Content">
         <Setter.Value>
            <Grid>
               <icons:PackIconZondicons Kind="AddSolid" />
            </Grid>
         </Setter.Value>
      </Setter>
   </Style>

   <Style TargetType="{x:Type ToggleButton}" x:Key="ChangeColorToggleButtonStyle">
      <Setter Property="Foreground" Value="Black"/>
      <Setter Property="Template">
         <Setter.Value>
            <ControlTemplate TargetType="{x:Type ToggleButton}">
               <Viewbox Stretch="Uniform" 
                        StretchDirection="Both">
                  <Grid Height="16" 
                        Width="16"
                        Background="Transparent">
                     <icons:PackIconFontAwesome Kind="PaintBrushSolid"/>
                     <Grid.Style>
                        <Style TargetType="{x:Type Grid}">
                           <Style.Triggers>
                              <Trigger Property="IsMouseOver" Value="True">
                                 <Trigger.EnterActions>
                                    <BeginStoryboard>
                                       <Storyboard>
                                          <ThicknessAnimation Storyboard.TargetProperty="(Grid.Margin)"
                                                           To="-1" 
                                                           Duration="0:0:0.1"/>
                                       </Storyboard>
                                    </BeginStoryboard>
                                 </Trigger.EnterActions>
                                 <Trigger.ExitActions>
                                    <BeginStoryboard>
                                       <Storyboard>
                                          <ThicknessAnimation Storyboard.TargetProperty="(Grid.Margin)"
                                                           To="0" 
                                                           Duration="0:0:0.1"/>
                                       </Storyboard>
                                    </BeginStoryboard>
                                 </Trigger.ExitActions>
                              </Trigger>
                           </Style.Triggers>
                        </Style>
                     </Grid.Style>
                  </Grid>
               </Viewbox>
            </ControlTemplate>
         </Setter.Value>
      </Setter>
      <!--<Style.Triggers>
         <Trigger Property="IsChecked" Value="True">
            <Setter Property="Foreground" Value="White" />
         </Trigger>
      </Style.Triggers>-->
   </Style>
   <!--#endregion-->

   <Style TargetType="{x:Type Button}" x:Key="HexButtonStyle">
      <Setter Property="Background" Value="Gray"/>
      <Setter Property="Template">
         <Setter.Value>
            <ControlTemplate TargetType="{x:Type Button}">
               <Viewbox Stretch="Uniform" 
                        StretchDirection="Both" >
                  <Grid Width="73.612159" Height="90" Margin="5">
                     <Path Name="Hexagon" 
                           Stretch="Uniform" 
                           Fill="{TemplateBinding Background}"
                           Data="M36.80607,0 L73.612159,21.25 73.612159,68.75 36.80607,90 0,68.75 0,21.25 36.80607,0 Z"/>
                     <Path Name="BevelShadow" Stretch="Uniform" 
                           Fill="Black" 
                           Opacity="0.4" 
                           VerticalAlignment="Bottom"
                           Data="M8.660254,5 L17.320508,0 17.320508,1 8.660254,6 0,1 0,0 8.660254,5 Z"/>
                     <Path Name="IconCrop" 
                           Stretch="Uniform" 
                           VerticalAlignment="Top" 
                           DataContext="{Binding Icon}"
                           Data="M36.80607,0 L73.612159,21.25 73.612159,63.75 36.80607,85 0,63.75 0,21.25 36.80607,0 Z">
                        <Path.Fill>
                           <ImageBrush ImageSource="{Binding Icon}" 
                                       Stretch="Uniform"/>
                        </Path.Fill>
                     </Path>
                     <Grid.Style>
                        <Style TargetType="Grid">
                           <Style.Triggers>
                              <Trigger Property="IsMouseOver" Value="True">
                                 <Trigger.EnterActions>
                                    <BeginStoryboard>
                                       <Storyboard>
                                          <DoubleAnimation Storyboard.TargetProperty="(Grid.Width)"
                                                           To="81.612159" 
                                                           Duration="0:0:0.1"/>
                                          <DoubleAnimation Storyboard.TargetProperty="(Grid.Height)"
                                                           To="98" 
                                                           Duration="0:0:0.1" />
                                          <ThicknessAnimation Storyboard.TargetProperty="(Grid.Margin)"
                                                              To="1" 
                                                              Duration="0:0:0.1"/>
                                       </Storyboard>
                                    </BeginStoryboard>
                                 </Trigger.EnterActions>
                                 <Trigger.ExitActions>
                                    <BeginStoryboard>
                                       <Storyboard>
                                          <DoubleAnimation Storyboard.TargetProperty="(Grid.Width)"
                                                           To="73.612159" 
                                                           Duration="0:0:0.1"/>
                                          <DoubleAnimation Storyboard.TargetProperty="(Grid.Height)"
                                                           To="90" 
                                                           Duration="0:0:0.1" />
                                          <ThicknessAnimation Storyboard.TargetProperty="(Grid.Margin)"
                                                              To="5" 
                                                              Duration="0:0:0.1"/>
                                       </Storyboard>
                                    </BeginStoryboard>
                                 </Trigger.ExitActions>
                              </Trigger>
                           </Style.Triggers>
                        </Style>
                     </Grid.Style>
                  </Grid>
               </Viewbox>
            </ControlTemplate>
         </Setter.Value>
      </Setter>
   </Style>

   <Style TargetType="{x:Type TextBox}" x:Key="MinimalTextBoxStyle">
      <Setter Property="Height" Value="16"/>
      <Setter Property="MinWidth" Value="10" />
      <Setter Property="Margin" Value="3 0 3 0" />
      <Setter Property="Background" Value="Black" />
      <Setter Property="Foreground" Value="{DynamicResource MahApps.Brushes.Text}" />
      <Setter Property="Template">
         <Setter.Value>
            <ControlTemplate TargetType="{x:Type TextBox}">
               <Grid FocusManager.FocusedElement="{Binding ElementName=PART_ContentHost}" 
                     Background="Transparent">
                  <Border BorderThickness="0 0 0 1" 
                       BorderBrush="{TemplateBinding Background}"
                       Padding="0"
                       Margin="0"/>
                  <ScrollViewer x:Name="PART_ContentHost"
                                HorizontalAlignment="Left"
                                HorizontalScrollBarVisibility="Disabled"
                                VerticalScrollBarVisibility="Disabled"
                                Margin="2 0 4 0" />
               </Grid>
            </ControlTemplate>
         </Setter.Value>
      </Setter>
   </Style>

   <Style TargetType="{x:Type mah:ColorPicker}" x:Key="ColorPickerPopupStyle" BasedOn="{StaticResource MahApps.Styles.ColorPicker}">
      <Setter Property="Template">
         <Setter.Value>
            <ControlTemplate TargetType="{x:Type mah:ColorPicker}">
               <Grid Background="Transparent">
                  <TabControl x:Name="PART_PopupTabControl"
                              ItemContainerStyle="{TemplateBinding TabItemStyle}"
                              Style="{TemplateBinding TabControlStyle}"
                              Background="Transparent">
                     <TabItem x:Name="PART_ColorPalettesTab"
                              Header="{TemplateBinding ColorPalettesTabHeader}"
                              HeaderTemplate="{TemplateBinding ColorPalettesTabHeaderTemplate}"
                              Visibility="{TemplateBinding IsColorPalettesTabVisible, Converter={StaticResource BooleanToVisibilityConverter}}">
                        <ScrollViewer CanContentScroll="False"
                                      HorizontalScrollBarVisibility="Disabled"
                                      VerticalScrollBarVisibility="Auto">
                           <VirtualizingStackPanel>
                              <mah:ColorPalette x:Name="PART_ColorPaletteStandard"
                                                ColorNamesDictionary="{TemplateBinding ColorNamesDictionary}"
                                                Header="{TemplateBinding StandardColorPaletteHeader}"
                                                HeaderTemplate="{TemplateBinding StandardColorPaletteHeaderTemplate}"
                                                ItemsSource="{TemplateBinding StandardColorPaletteItemsSource}"
                                                Style="{TemplateBinding StandardColorPaletteStyle}"
                                                Visibility="{TemplateBinding IsStandardColorPaletteVisible, Converter={StaticResource BooleanToVisibilityConverter}}" />

                              <mah:ColorPalette x:Name="PART_ColorPaletteAvailable"
                                                ColorNamesDictionary="{TemplateBinding ColorNamesDictionary}"
                                                Header="{TemplateBinding AvailableColorPaletteHeader}"
                                                HeaderTemplate="{TemplateBinding AvailableColorPaletteHeaderTemplate}"
                                                ItemsSource="{TemplateBinding AvailableColorPaletteItemsSource}"
                                                Style="{TemplateBinding AvailableColorPaletteStyle}"
                                                Visibility="{TemplateBinding IsAvailableColorPaletteVisible, Converter={StaticResource BooleanToVisibilityConverter}}" />

                              <mah:ColorPalette x:Name="PART_ColorPaletteCustom01"
                                                ColorNamesDictionary="{TemplateBinding ColorNamesDictionary}"
                                                Header="{TemplateBinding CustomColorPalette01Header}"
                                                HeaderTemplate="{TemplateBinding CustomColorPalette01HeaderTemplate}"
                                                ItemsSource="{TemplateBinding CustomColorPalette01ItemsSource}"
                                                Style="{TemplateBinding CustomColorPalette01Style}"
                                                Visibility="{TemplateBinding IsCustomColorPalette01Visible, Converter={StaticResource BooleanToVisibilityConverter}}" />

                              <mah:ColorPalette x:Name="PART_ColorPaletteCustom02"
                                                ColorNamesDictionary="{TemplateBinding ColorNamesDictionary}"
                                                Header="{TemplateBinding CustomColorPalette02Header}"
                                                HeaderTemplate="{TemplateBinding CustomColorPalette02HeaderTemplate}"
                                                ItemsSource="{TemplateBinding CustomColorPalette02ItemsSource}"
                                                Style="{TemplateBinding CustomColorPalette02Style}"
                                                Visibility="{TemplateBinding IsCustomColorPalette02Visible, Converter={StaticResource BooleanToVisibilityConverter}}" />

                              <mah:ColorPalette x:Name="PART_ColorPaletteRecent"
                                                ColorNamesDictionary="{TemplateBinding ColorNamesDictionary}"
                                                Header="{TemplateBinding RecentColorPaletteHeader}"
                                                HeaderTemplate="{TemplateBinding RecentColorPaletteHeaderTemplate}"
                                                ItemsSource="{TemplateBinding RecentColorPaletteItemsSource}"
                                                Style="{TemplateBinding RecentColorPaletteStyle}"
                                                Visibility="{TemplateBinding IsRecentColorPaletteVisible, Converter={StaticResource BooleanToVisibilityConverter}}" />
                           </VirtualizingStackPanel>
                        </ScrollViewer>
                     </TabItem>
                     <TabItem x:Name="PART_AdvancedTab"
                              Header="{TemplateBinding AdvancedTabHeader}"
                              HeaderTemplate="{TemplateBinding AdvancedTabHeaderTemplate}"
                              Visibility="{TemplateBinding IsAdvancedTabVisible, Converter={StaticResource BooleanToVisibilityConverter}}">
                        <ScrollViewer>
                           <mah:ColorCanvas mah:TextBoxHelper.AutoWatermark="{TemplateBinding mah:TextBoxHelper.AutoWatermark}"
                                            mah:TextBoxHelper.ButtonCommand="{TemplateBinding mah:TextBoxHelper.ButtonCommand}"
                                            mah:TextBoxHelper.ButtonCommandParameter="{TemplateBinding mah:TextBoxHelper.ButtonCommandParameter}"
                                            mah:TextBoxHelper.ButtonContent="{TemplateBinding mah:TextBoxHelper.ButtonContent}"
                                            mah:TextBoxHelper.ButtonContentTemplate="{TemplateBinding mah:TextBoxHelper.ButtonContentTemplate}"
                                            mah:TextBoxHelper.ButtonFontFamily="{TemplateBinding mah:TextBoxHelper.ButtonFontFamily}"
                                            mah:TextBoxHelper.ButtonFontSize="{TemplateBinding mah:TextBoxHelper.ButtonFontSize}"
                                            mah:TextBoxHelper.ButtonTemplate="{TemplateBinding mah:TextBoxHelper.ButtonTemplate}"
                                            mah:TextBoxHelper.ButtonWidth="{TemplateBinding mah:TextBoxHelper.ButtonWidth}"
                                            mah:TextBoxHelper.ButtonsAlignment="{TemplateBinding mah:TextBoxHelper.ButtonsAlignment}"
                                            mah:TextBoxHelper.ClearTextButton="{TemplateBinding mah:TextBoxHelper.ClearTextButton}"
                                            mah:TextBoxHelper.Watermark="{TemplateBinding mah:TextBoxHelper.Watermark}"
                                            mah:TextBoxHelper.WatermarkAlignment="{TemplateBinding mah:TextBoxHelper.WatermarkAlignment}"
                                            mah:TextBoxHelper.WatermarkTrimming="{TemplateBinding mah:TextBoxHelper.WatermarkTrimming}"
                                            mah:TextBoxHelper.WatermarkWrapping="{TemplateBinding mah:TextBoxHelper.WatermarkWrapping}"
                                            ColorNamesDictionary="{TemplateBinding ColorNamesDictionary}"
                                            LabelAlphaChannel="{TemplateBinding LabelAlphaChannel}"
                                            LabelBlueChannel="{TemplateBinding LabelBlueChannel}"
                                            LabelColorName="{TemplateBinding LabelColorName}"
                                            LabelColorPreview="{TemplateBinding LabelColorPreview}"
                                            LabelGreenChannel="{TemplateBinding LabelGreenChannel}"
                                            LabelHueChannel="{TemplateBinding LabelHueChannel}"
                                            LabelRedChannel="{TemplateBinding LabelRedChannel}"
                                            LabelSaturationChannel="{TemplateBinding LabelSaturationChannel}"
                                            LabelValueChannel="{TemplateBinding LabelValueChannel}"
                                            SelectedColor="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=SelectedColor}" />
                        </ScrollViewer>
                     </TabItem>
                  </TabControl>
               </Grid>
            </ControlTemplate>
         </Setter.Value>
      </Setter>
   </Style>

   <Style TargetType="{x:Type mah:ColorPalette}" x:Key="GeneralColorPaletteStyle" BasedOn="{StaticResource MahApps.Styles.ColorPalette}">
      <Setter Property="Background" Value="Red" />
   </Style>

   <Style TargetType="{x:Type controlzex:TabControlEx}" x:Key="HideableTabControlExStyle">
      <Setter Property="Focusable" Value="False" />
      <Setter Property="Template">
         <Setter.Value>
            <ControlTemplate TargetType="{x:Type controlzex:TabControlEx}">
               <Grid ClipToBounds="true"
                     KeyboardNavigation.TabNavigation="None"
                     SnapsToDevicePixels="true">
                  <Grid.ColumnDefinitions>
                     <ColumnDefinition x:Name="ColumnDefinition0" />
                     <ColumnDefinition x:Name="ColumnDefinition1" Width="0" />
                  </Grid.ColumnDefinitions>
                  <Grid.RowDefinitions>
                     <RowDefinition x:Name="RowDefinition0" Height="Auto" />
                     <RowDefinition x:Name="RowDefinition1" Height="*" />
                  </Grid.RowDefinitions>
                  <TabPanel x:Name="PART_HeaderPanel"
                            Grid.Row="0"
                            Grid.Column="0"
                            Margin="2 2 2 0"
                            Panel.ZIndex="1"
                            Background="Transparent"
                            IsItemsHost="true"
                            KeyboardNavigation.TabIndex="1"
                            Visibility="{TemplateBinding TabPanelVisibility}"/>

                  <Border x:Name="contentPanel"
                          Grid.Row="1"
                          Grid.Column="0"
                          Background="{TemplateBinding Background}"
                          BorderBrush="{TemplateBinding BorderBrush}"
                          BorderThickness="{TemplateBinding BorderThickness}"
                          KeyboardNavigation.DirectionalNavigation="Contained"
                          KeyboardNavigation.TabIndex="2"
                          KeyboardNavigation.TabNavigation="Local">
                     <Grid x:Name="PART_ItemsHolder"
                           Margin="{TemplateBinding Padding}"
                           SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                           Visibility="{TemplateBinding ChildContentVisibility}"/>
                  </Border>
               </Grid>
               <ControlTemplate.Triggers>
                  <Trigger Property="TabStripPlacement" Value="Bottom">
                     <Setter TargetName="PART_HeaderPanel" Property="Grid.Row" Value="1" />
                     <Setter TargetName="PART_ItemsHolder" Property="Grid.Row" Value="0" />
                     <Setter TargetName="PART_ItemsHolder" Property="Margin" Value="2 0 2 2" />
                     <Setter TargetName="RowDefinition0" Property="Height" Value="*" />
                     <Setter TargetName="RowDefinition1" Property="Height" Value="Auto" />
                  </Trigger>
                  <Trigger Property="TabStripPlacement" Value="Left">
                     <Setter TargetName="ColumnDefinition0" Property="Width" Value="Auto" />
                     <Setter TargetName="ColumnDefinition1" Property="Width" Value="*" />
                     <Setter TargetName="PART_HeaderPanel" Property="Grid.Column" Value="0" />
                     <Setter TargetName="PART_HeaderPanel" Property="Grid.Row" Value="0" />
                     <Setter TargetName="PART_HeaderPanel" Property="Grid.Row" Value="0" />
                     <Setter TargetName="PART_HeaderPanel" Property="Margin" Value="2 2 0 2" />
                     <Setter TargetName="PART_ItemsHolder" Property="Grid.Column" Value="1" />
                     <Setter TargetName="RowDefinition0" Property="Height" Value="*" />
                     <Setter TargetName="RowDefinition1" Property="Height" Value="0" />
                  </Trigger>
                  <Trigger Property="TabStripPlacement" Value="Right">
                     <Setter TargetName="ColumnDefinition0" Property="Width" Value="*" />
                     <Setter TargetName="ColumnDefinition1" Property="Width" Value="Auto" />
                     <Setter TargetName="PART_HeaderPanel" Property="Grid.Column" Value="1" />
                     <Setter TargetName="PART_HeaderPanel" Property="Grid.Row" Value="0" />
                     <Setter TargetName="PART_HeaderPanel" Property="Margin" Value="0 2 2 2" />
                     <Setter TargetName="PART_ItemsHolder" Property="Grid.Column" Value="0" />
                     <Setter TargetName="PART_ItemsHolder" Property="Grid.Row" Value="0" />
                     <Setter TargetName="RowDefinition0" Property="Height" Value="*" />
                     <Setter TargetName="RowDefinition1" Property="Height" Value="0" />
                  </Trigger>
               </ControlTemplate.Triggers>
            </ControlTemplate>
         </Setter.Value>
      </Setter>
      <Style.Triggers>
         <Trigger Property="IsEnabled" Value="False">
            <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
         </Trigger>
      </Style.Triggers>
   </Style>
</ResourceDictionary>